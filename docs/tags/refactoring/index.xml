<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on One Problem Solved</title>
    <link>http://www.onesolved.com/tags/refactoring/</link>
    <description>Recent content in Refactoring on One Problem Solved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://www.onesolved.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refactoring Tips</title>
      <link>http://www.onesolved.com/post/refactoring_tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.onesolved.com/post/refactoring_tips/</guid>
      <description>Code Smells Here&amp;rsquo;s a collection of common &amp;ldquo;code smells&amp;rdquo; from various sources that signal that code is a candidate for refactoring.
Here is an example of method-level benchmarking using BenchmarkDotNet.
The BenchmarkDotNet site provides detailed instructions for setup.
The following example shows a basic setup to benchmark two C# methods.
Creating a Console Application for Benchmarking First, create a console application and install the BenchmarkDotNet Nuget package:
PM&amp;gt; Install-Package BenchmarkDotNet  The following example benchmarks two different methods of assigning new values based on comparisons:</description>
    </item>
    
  </channel>
</rss>