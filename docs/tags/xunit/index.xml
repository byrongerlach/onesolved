<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xunit on One Problem Solved</title>
    <link>http://www.onesolved.com/tags/xunit/</link>
    <description>Recent content in Xunit on One Problem Solved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.onesolved.com/tags/xunit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Repository Pattern</title>
      <link>http://www.onesolved.com/post/testing_advice/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.onesolved.com/post/testing_advice/</guid>
      <description>Repository Pattern The repository pattern decouples your data store from your implementation. This solves a big problem in unit testing and development, which is: &amp;ldquo;Do I have to interact with a real database in my unit tests?&amp;rdquo; With the repository pattern, the answer is no.
&amp;hellip; insert example that compiles
Test-Driven Development  &amp;ldquo;Remember, we&amp;rsquo;re not going to code anything that doesn&amp;rsquo;t convert failing test into a passing one.&amp;rdquo; 1</description>
    </item>
    
    <item>
      <title>Testing Advice</title>
      <link>http://www.onesolved.com/post/respository_pattern/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.onesolved.com/post/respository_pattern/</guid>
      <description> Testing Advice Here&amp;rsquo;s a collection of useful testing advice.
Test-Driven Development  &amp;ldquo;Remember, we&amp;rsquo;re not going to code anything that doesn&amp;rsquo;t convert failing test into a passing one.&amp;rdquo; 1
  Building a Microservice with ASP.NET Core, Building Microservices with ASP.NET Core.[return]   </description>
    </item>
    
    <item>
      <title>Xunit for Dotnet Core</title>
      <link>http://www.onesolved.com/post/xunit/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.onesolved.com/post/xunit/</guid>
      <description>XUnit XUnit Dotnet Core Documentation
XUnit Assertions XUnit&amp;rsquo;s Assert automatically recognizes reference types and collections in C#.
Therefore, two collections can be compared like this:
var actual = GetData(); var expected = new[] {&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;}; Assert.Equal(expected, actual);   ``` fsharp // Add some numbers let addTwo a b : a + b addTwo 1 2 | addTwo 3 | addTwo 4 // Get distinct items let myList : [ &#34;</description>
    </item>
    
  </channel>
</rss>